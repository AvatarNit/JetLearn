import pandas as pd
from sklearn.model_selection import train_test_split

data = pd.read_csv(r"C:\Users\sajja\OneDrive\Desktop\VSCode\machineLearning\lesson12-Capstone\spam_Emails_data.csv", nrows=5000)

print(data.head())
print(data.info())

X = data["text"]
y = data["label"]

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()

y = encoder.fit_transform(y)

XTrain,XTest,yTrain,yTest = train_test_split(X,y,test_size=0.2,random_state=2)

import nltk
import ssl

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

nltk.download("stopwords")
nltk.download("wordnet")

from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import re

wne = WordNetLemmatizer()

def transform(data):
    corpus = []

    for i in data:
        newi = re.sub("[^a-zA-Z]", " ", i)
        newi = newi.lower()
        newi = newi.split()
        tempList = [wne.lemmatize(word) for word in newi if word not in stopwords.words("english")]
        corpus.append(" ".join(tempList))
    
    return corpus

XTrainLematized = transform(XTrain)
XTestLematized = transform(XTest)

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(ngram_range=(1,2))

XTrainVectored = cv.fit_transform(XTrainLematized)
XTestVectored = cv.transform(XTestLematized)

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators=100)

rfc.fit(XTrainVectored,yTrain)

XTrainPredict = rfc.predict(XTrainVectored)
XTestPredict = rfc.predict(XTestVectored)

def findSpam(text):
    text = transform(text)
    text = cv.transform(text)
    prediction = rfc.predict(text)

    if prediction == 0:
        return "Spam"
    else:
        return "Not Spam"
    
email1 = ["this is an automatically generated delivery status notification your message has been successfully relayed to the following recipients but the requested delivery status notifications may not be generated by the destination paulconnolly llgm com escapelong aol com ashley brown harvard edu inline attachment follows from to ashley brown harvard edu escapelong aol com paulconnolly llgm com cc roan michael date friday october escapenumber escapenumber escapenumber escapenumber escapenumber gmt subject ashley we would prefer given the schedules to hold a conference call on wednesday pm with a group of marketers generators seems like the easiest way to discuss with everyone it would be great to have a paper from ng earlier in the week here is our list of recommended people probably best to have ng or you call to invite rather than enron to highlight your interest in brokering a deal in the midwest exelon jack crowley escapenumber escapenumber escapenumber constellation harvey reed escapenumber escapenumber escapenumber edison mission energy reem fahey escapenumber escapenumber escapenumber reliant john orr escapenumber escapenumber escapenumber duke mike gildea escapenumber escapenumber escapenumber or lee barrett escapenumber escapenumber escapenumber mirant jim mayhew escapenumber escapenumber escapenumber pg e richard doying escapenumber escapenumber escapenumber cinergy dennis flaherty thanks jim"] #Not Spam
email2 = ["thank you for your loan request which we recieved on escapenumber escapenumber escapenumber we'd like to inform you that we are accepting your application bad credit ok we are ready to give you a escapenumber escapenumber loan for a low month payment approval process will take only escapenumber minute please visit the confirmation link below and fill out our short escapenumber second form http www fastrefi biz a grabadora"] # Spam

print(f"Spam Finder:\n\tEmail 1: {findSpam(email1)}\n\tEmail 2: {findSpam(email2)}")


